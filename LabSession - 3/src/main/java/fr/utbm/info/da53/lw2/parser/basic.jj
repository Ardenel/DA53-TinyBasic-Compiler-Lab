/* 
 * Tiny Basic Grammar Definition for JavaCC
 * Author: Arthur
 * Version: 1.1
 */

////////// Options //////////
options {
  IGNORE_CASE = true;
  STATIC = false;
}

//////////Preamble//////////
PARSER_BEGIN(BasicParser)

package fr.utbm.info.da53.lw2.parser;

import fr.utbm.info.da53.lw2.type.*;
import fr.utbm.info.da53.lw2.context.*;
import fr.utbm.info.da53.lw2.symbol.*;
import fr.utbm.info.da53.lw2.error.*;
import fr.utbm.info.da53.lw2.syntaxtree.abstractclasses.*;
import fr.utbm.info.da53.lw2.syntaxtree.keywords.*;
import fr.utbm.info.da53.lw2.syntaxtree.operator.*;
import fr.utbm.info.da53.lw2.syntaxtree.relop.*;
import fr.utbm.info.da53.lw2.syntaxtree.variables.*;

import java.util.SortedMap;
import java.util.TreeMap;

public class BasicParser {
    private int basicLineNumber = 1;
    private final SymbolTable symbolTable = new SymbolTable();
    private final SortedMap<Integer,Statement> program = new TreeMap<Integer,Statement>();

    /**
     * @return the symbol table used by the parser.
     */
    public SymbolTable getSymbolTable() {
        return this.symbolTable;
    }

    /**
     * @return the root of the parse tree (list of statements).
     */
    public SortedMap<Integer,Statement> getProgram() {
        return this.program;
    }

    public SortedMap<Integer,Statement> executeCompiler() throws CompilerException, ParseException {
        this.symbolTable.clear();
        code(program);
        return program;
    }
}

PARSER_END(BasicParser)

//////////Lexer//////////

//////Skip white spaces
SKIP : {
      " "
    | "\t"
    | "\r"
    | "REM (~[\n])*"
}

//////Cariage return
TOKEN : {
    <CR: "\n" >
}

//////Relational operators
TOKEN : {
    <EQ: "=">
    | <LT: "<">
    | <LE: "<=">
    | <GT: ">">
    | <GE: ">=">
    | <NE: "<>" | "><">
}

//////Arithmetic operators

TOKEN : {
    <PLUS: "+">
    | <MINUS: "-">
    | <MULTIPLY: "*">
    | <DIVIDE: "/">
}

//////Parenthesis

TOKEN : {
    <OPAREN: "(">
    | <CPAREN: ")">
}

//////String

TOKEN: {
    <STRING: "\"" (~["\"","\n","\r"])* "\"">
}

//////Number

TOKEN : {
    <NUMBER: (["0"-"9"])+("."(["0"-"9"])+)?>
}

//////Identifier

TOKEN : {
    <IDENTIFIER: ["_","a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9"])*>
}

//////Keywords

TOKEN : {
    <PRINT: ("P"|"p") ("R"|"r") ("I"|"i") ("N"|"n") ("T"|"t")>
    | <IF: ("I"|"i") ("F"|"f")>
    | <THEN: ("T"|"t") ("H"|"h") ("E"|"e") ("N"|"n")>
    | <ELSE: ("E"|"e") ("L"|"l") ("S"|"s") ("E"|"e")>
    | <GOTO: ("G"|"g") ("O"|"o") ("T"|"t") ("O"|"o")>
    | <GOSUB: ("G"|"g") ("O"|"o") ("S"|"s") ("U"|"u") ("B"|"b")>
    | <LET: ("L"|"l") ("E"|"e") ("T"|"t")>
    | <INPUT: ("I"|"i") ("N"|"n") ("P"|"p") ("U"|"u") ("T"|"t")>
    | <RETURN: ("R"|"r") ("E"|"e") ("T"|"t") ("U"|"u") ("R"|"r") ("N"|"n")>
    | <END: ("E"|"e") ("N"|"n") ("D"|"d")>
    | <REM: ("R"|"r") ("E"|"e") ("M"|"m")>
}


//////////Parser//////////

void code(SortedMap<Integer,Statement> program) throws CompilerException:
{}
{
    lineOfCode(program) restOfCode(program)
}

void restOfCode(SortedMap<Integer,Statement> program) throws CompilerException:
{}
{
  <CR> lineOfCode(program) restOfCode(program)
  | {}
}


void lineOfCode(SortedMap<Integer,Statement> program) throws CompilerException :
{
    Token t;
    AbstractStatementTreeNode stmt;
}
{
    t = <NUMBER> stmt = statement()
        {
            int lineNumber = NumberUtil.parseInt(t.image);
            if (lineNumber < 0) throw new CompilerException(CompilationErrorType.INVALID_LINE_NUMBER, this.basicLineNumber, "Negative number line Value");
            if (stmt != null) program.put(lineNumber, stmt);
        }

  |
    stmt = statement()
    {
        if (stmt != null) program.put(this.basicLineNumber, stmt);
    }
}


AbstractStatementTreeNode statement() throws CompilerException:
{
    AbstractValueTreeNode expr, rightExpr, var;
    AbstractStatementTreeNode stmt, thenStmt, elseStmt;
    IfThenTreeNode ifNode;
    Token str;
}
{
    <PRINT> expr = expression()
    {if (expr == null) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.basicLineNumber, "Expecting an expression");
    else {return new PrintTreeNode(expr);}
    }

    |<IF> expr = expression() relop() rightExpr = expression() <THEN> thenStmt = statement() elseStmt = elseStatement()
    {if (expr == null) throw new CompilerException(CompilationErrorType.EXPECTING_RIGHT_OPERAND, this.basicLineNumber, "Expecting a left operand");
    else {if (rightExpr == null) throw new CompilerException(CompilationErrorType.EXPECTING_RIGHT_OPERAND, this.basicLineNumber, "Expecting a right operand");
        else {ifNode = new IfThenTreeNode(expr, thenStmt);}}
    if (elseStmt != null) {ifNode.setElseStatement(elseStmt);}
    return ifNode;
    }

    |<GOTO> expr = expression()
    {if (expr == null) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.basicLineNumber, "Expecting an expression");
    else {return new GotoTreeNode(expr);}
    }

    |<INPUT> var = variable()
    {if (var == null) throw new CompilerException(CompilationErrorType.SYNTAX_ERROR, this.basicLineNumber, "Syntax error");
    else {return new InputTreeNode();}}

    |<LET> var = variable() <EQ> expr = expression()
    {if (var == null) throw new CompilerException(CompilationErrorType.SYNTAX_ERROR, this.basicLineNumber, "Syntax error");
    else {if (expr == null) throw new CompilerException(CompilationErrorType.SYNTAX_ERROR, this.basicLineNumber, "Syntax error");
        else {return new LetTreeNode(var.toString(), expr);}}
    }

    |<GOSUB> expr = expression()
    {if (expr == null) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.basicLineNumber, "Expecting an expression");
    else {return new GosubTreeNode(expr);}
    }

    |<RETURN>
    {return new ReturnTreeNode();}

    |<END>
    {return new EndTreeNode();}

}

AbstractStatementTreeNode  elseStatement() throws CompilerException :
{
    AbstractStatementTreeNode stmt;
}
{
    <ELSE> stmt = statement()
    {if (stmt == null) throw new CompilerException(CompilationErrorType.NO_VALID_STATEMENT, this.basicLineNumber, "No valid statement");
    else {return new ElseTreeNode(stmt);}
    }

    | {return null;}
}

AbstractComparisonOperatorTreeNode relop() throws CompilerException:
{
}
{
    <EQ> {return new EqualTreeNode();}
   |<NE> {return new NotEqualTreeNode();}
   |<LT> {return new LowerThanTreeNode();}
   |<LE> {return new LowerEqualTreeNode();}
   |<GT> {return new GreaterThanTreeNode();}
   |<GE> {return new GreaterEqualTreeNode();}
}

AbstractValueTreeNode  expression() throws CompilerException:
{
    AbstractValueTreeNode leftOp, expr;
}
{
    leftOp = term() expr = expressionp(leftOp)
    {if (leftOp == null) throw new CompilerException(CompilationErrorType.EXPECTING_LEFT_OPERAND, this.basicLineNumber, "Expecting a left operand");
    else {if (expr == null) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.basicLineNumber, "Expecting an expression");
        else {return expr;}}
    }
}

AbstractValueTreeNode  expressionp(AbstractValueTreeNode leftOp) throws CompilerException:
{
    AbstractValueTreeNode rightOp, expr;
}
{
    <PLUS> rightOp = term() expr = expressionp(leftOp)
    {if (rightOp == null) throw new CompilerException(CompilationErrorType.EXPECTING_RIGHT_OPERAND, this.basicLineNumber, "Expecting a right operand");
    else {if (expr == null) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.basicLineNumber, "Expecting an expression");
        else {return new AdditionTreeNode(leftOp, rightOp);}}
    }
    |<MINUS> rightOp = term() expr = expressionp(leftOp)
    {if (rightOp == null) throw new CompilerException(CompilationErrorType.EXPECTING_RIGHT_OPERAND, this.basicLineNumber, "Expecting a right operand");
    else {if (expr == null) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.basicLineNumber, "Expecting an expression");
        else {return new SubtractionTreeNode(leftOp, rightOp);}}
    }
    | {return null;}
}

AbstractValueTreeNode  term() throws CompilerException:
{
    AbstractValueTreeNode leftOp, term;
}
{
    leftOp = factor() term = termp(leftOp)
    {if (leftOp == null) throw new CompilerException(CompilationErrorType.EXPECTING_LEFT_OPERAND, this.basicLineNumber, "Expecting a left operand");
    else {if (term == null) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.basicLineNumber, "Expecting an expression");
        else{return term;}}
    }
}

AbstractValueTreeNode  termp(AbstractValueTreeNode leftOp) throws CompilerException:
{
    AbstractValueTreeNode rightOp, term;
 }
{
    <MULTIPLY> rightOp = factor() term = termp(leftOp)
    {if (rightOp == null) throw new CompilerException(CompilationErrorType.EXPECTING_RIGHT_OPERAND, this.basicLineNumber, "Expecting a right operand");
    else {if (term == null) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.basicLineNumber, "Expecting an expression");
        else {return new MultiplyTreeNode(leftOp, rightOp);}}
    }
    |<DIVIDE> rightOp = factor() term = termp(leftOp)
    {if (rightOp == null) throw new CompilerException(CompilationErrorType.EXPECTING_RIGHT_OPERAND, this.basicLineNumber, "Expecting a right operand");
    else {if (term == null) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.basicLineNumber, "Expecting an expression");
        else {return new DivideTreeNode(leftOp, rightOp);}}
    }
    | {return null;}
}

AbstractValueTreeNode  factor() throws CompilerException:
{
    AbstractValueTreeNode expr, var;
}
{
    <OPAREN> expr = expression() <CPAREN>
    { if (expr == null) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.basicLineNumber, "Expecting an expression");
    else {return expr;}
    }
    | var = variable()
    {if (var == null) throw new CompilerException(CompilationErrorType.SYNTAX_ERROR, this.basicLineNumber, "Syntax error");
    else {return var;}
    }
}

AbstractValueTreeNode variable() throws CompilerException:
{
    Token t;
}
{
    t = <NUMBER> { return new NumberTreeNode(new Value(t.image)); }
  | t = <IDENTIFIER> { return new IdentifierTreeNode(t.image); }
}