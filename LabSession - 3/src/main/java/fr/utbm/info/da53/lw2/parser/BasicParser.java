/* Generated By:JavaCC: Do not edit this line. BasicParser.java */
package fr.utbm.info.da53.lw2.parser;

import fr.utbm.info.da53.lw2.type.*;
import fr.utbm.info.da53.lw2.context.*;
import fr.utbm.info.da53.lw2.symbol.*;
import fr.utbm.info.da53.lw2.error.*;
import fr.utbm.info.da53.lw2.syntaxtree.abstractclasses.*;
import fr.utbm.info.da53.lw2.syntaxtree.keywords.*;
import fr.utbm.info.da53.lw2.syntaxtree.operator.*;
import fr.utbm.info.da53.lw2.syntaxtree.relop.*;
import fr.utbm.info.da53.lw2.syntaxtree.variables.*;

import java.util.SortedMap;
import java.util.TreeMap;

public class BasicParser implements BasicParserConstants {
    private int basicLineNumber = 1;
    private final SymbolTable symbolTable = new SymbolTable();
    private final SortedMap<Integer,Statement> program = new TreeMap<Integer,Statement>();

    /**
     * @return the symbol table used by the parser.
     */
    public SymbolTable getSymbolTable() {
        return this.symbolTable;
    }

    /**
     * @return the root of the parse tree (list of statements).
     */
    public SortedMap<Integer,Statement> getProgram() {
        return this.program;
    }

    public SortedMap<Integer,Statement> executeCompiler() throws CompilerException, ParseException {
        this.symbolTable.clear();
        code(program);
        return program;
    }

//////////Parser//////////
  final public void code(SortedMap<Integer,Statement> program) throws ParseException, CompilerException {
    lineOfCode(program);
    restOfCode(program);
  }

  final public void restOfCode(SortedMap<Integer,Statement> program) throws ParseException, CompilerException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CR:
      jj_consume_token(CR);
      lineOfCode(program);
      restOfCode(program);
      break;
    default:
      jj_la1[0] = jj_gen;

    }
  }

  final public void lineOfCode(SortedMap<Integer,Statement> program) throws ParseException, CompilerException {
    Token t;
    AbstractStatementTreeNode stmt;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      t = jj_consume_token(NUMBER);
      stmt = statement();
            int lineNumber = NumberUtil.parseInt(t.image);
            if (lineNumber < 0) {if (true) throw new CompilerException(CompilationErrorType.INVALID_LINE_NUMBER, this.basicLineNumber, "Negative number line Value");}
            if (stmt != null) program.put(lineNumber, stmt);
      break;
    case PRINT:
    case IF:
    case GOTO:
    case GOSUB:
    case LET:
    case INPUT:
    case RETURN:
    case END:
      stmt = statement();
        if (stmt != null) program.put(this.basicLineNumber, stmt);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public AbstractStatementTreeNode statement() throws ParseException, CompilerException {
    AbstractValueTreeNode expr, rightExpr, var;
    AbstractStatementTreeNode stmt, thenStmt, elseStmt;
    IfThenTreeNode ifNode;
    Token str;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRINT:
      jj_consume_token(PRINT);
      expr = expression();
     if (expr == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.basicLineNumber, "Expecting an expression");}
    else {{if (true) return new PrintTreeNode(expr);}}
      break;
    case IF:
      jj_consume_token(IF);
      expr = expression();
      relop();
      rightExpr = expression();
      jj_consume_token(THEN);
      thenStmt = statement();
      elseStmt = elseStatement();
     if (expr == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_RIGHT_OPERAND, this.basicLineNumber, "Expecting a left operand");}
    else {if (rightExpr == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_RIGHT_OPERAND, this.basicLineNumber, "Expecting a right operand");}
        else {ifNode = new IfThenTreeNode(expr, thenStmt);}}
    if (elseStmt != null) {ifNode.setElseStatement(elseStmt);}
    {if (true) return ifNode;}
      break;
    case GOTO:
      jj_consume_token(GOTO);
      expr = expression();
     if (expr == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.basicLineNumber, "Expecting an expression");}
    else {{if (true) return new GotoTreeNode(expr);}}
      break;
    case INPUT:
      jj_consume_token(INPUT);
      var = variable();
     if (var == null) {if (true) throw new CompilerException(CompilationErrorType.SYNTAX_ERROR, this.basicLineNumber, "Syntax error");}
    else {{if (true) return new InputTreeNode();}}
      break;
    case LET:
      jj_consume_token(LET);
      var = variable();
      jj_consume_token(EQ);
      expr = expression();
     if (var == null) {if (true) throw new CompilerException(CompilationErrorType.SYNTAX_ERROR, this.basicLineNumber, "Syntax error");}
    else {if (expr == null) {if (true) throw new CompilerException(CompilationErrorType.SYNTAX_ERROR, this.basicLineNumber, "Syntax error");}
        else {{if (true) return new LetTreeNode(var.toString(), expr);}}}
      break;
    case GOSUB:
      jj_consume_token(GOSUB);
      expr = expression();
     if (expr == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.basicLineNumber, "Expecting an expression");}
    else {{if (true) return new GosubTreeNode(expr);}}
      break;
    case RETURN:
      jj_consume_token(RETURN);
     {if (true) return new ReturnTreeNode();}
      break;
    case END:
      jj_consume_token(END);
     {if (true) return new EndTreeNode();}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public AbstractStatementTreeNode elseStatement() throws ParseException, CompilerException {
    AbstractStatementTreeNode stmt;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      stmt = statement();
     if (stmt == null) {if (true) throw new CompilerException(CompilationErrorType.NO_VALID_STATEMENT, this.basicLineNumber, "No valid statement");}
    else {{if (true) return new ElseTreeNode(stmt);}}
      break;
    default:
      jj_la1[3] = jj_gen;
       {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public AbstractComparisonOperatorTreeNode relop() throws ParseException, CompilerException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
          {if (true) return new EqualTreeNode();}
      break;
    case NE:
      jj_consume_token(NE);
          {if (true) return new NotEqualTreeNode();}
      break;
    case LT:
      jj_consume_token(LT);
          {if (true) return new LowerThanTreeNode();}
      break;
    case LE:
      jj_consume_token(LE);
          {if (true) return new LowerEqualTreeNode();}
      break;
    case GT:
      jj_consume_token(GT);
          {if (true) return new GreaterThanTreeNode();}
      break;
    case GE:
      jj_consume_token(GE);
          {if (true) return new GreaterEqualTreeNode();}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public AbstractValueTreeNode expression() throws ParseException, CompilerException {
    AbstractValueTreeNode leftOp, expr;
    leftOp = term();
    expr = expressionp(leftOp);
     if (leftOp == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_LEFT_OPERAND, this.basicLineNumber, "Expecting a left operand");}
    else {if (expr == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.basicLineNumber, "Expecting an expression");}
        else {{if (true) return expr;}}}
    throw new Error("Missing return statement in function");
  }

  final public AbstractValueTreeNode expressionp(AbstractValueTreeNode leftOp) throws ParseException, CompilerException {
    AbstractValueTreeNode rightOp, expr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      rightOp = term();
      expr = expressionp(leftOp);
     if (rightOp == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_RIGHT_OPERAND, this.basicLineNumber, "Expecting a right operand");}
    else {if (expr == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.basicLineNumber, "Expecting an expression");}
        else {{if (true) return new AdditionTreeNode(leftOp, rightOp);}}}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      rightOp = term();
      expr = expressionp(leftOp);
     if (rightOp == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_RIGHT_OPERAND, this.basicLineNumber, "Expecting a right operand");}
    else {if (expr == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.basicLineNumber, "Expecting an expression");}
        else {{if (true) return new SubtractionTreeNode(leftOp, rightOp);}}}
      break;
    default:
      jj_la1[5] = jj_gen;
       {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public AbstractValueTreeNode term() throws ParseException, CompilerException {
    AbstractValueTreeNode leftOp, term;
    leftOp = factor();
    term = termp(leftOp);
     if (leftOp == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_LEFT_OPERAND, this.basicLineNumber, "Expecting a left operand");}
    else {if (term == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.basicLineNumber, "Expecting an expression");}
        else{{if (true) return term;}}}
    throw new Error("Missing return statement in function");
  }

  final public AbstractValueTreeNode termp(AbstractValueTreeNode leftOp) throws ParseException, CompilerException {
    AbstractValueTreeNode rightOp, term;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULTIPLY:
      jj_consume_token(MULTIPLY);
      rightOp = factor();
      term = termp(leftOp);
     if (rightOp == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_RIGHT_OPERAND, this.basicLineNumber, "Expecting a right operand");}
    else {if (term == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.basicLineNumber, "Expecting an expression");}
        else {{if (true) return new MultiplyTreeNode(leftOp, rightOp);}}}
      break;
    case DIVIDE:
      jj_consume_token(DIVIDE);
      rightOp = factor();
      term = termp(leftOp);
     if (rightOp == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_RIGHT_OPERAND, this.basicLineNumber, "Expecting a right operand");}
    else {if (term == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.basicLineNumber, "Expecting an expression");}
        else {{if (true) return new DivideTreeNode(leftOp, rightOp);}}}
      break;
    default:
      jj_la1[6] = jj_gen;
       {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public AbstractValueTreeNode factor() throws ParseException, CompilerException {
    AbstractValueTreeNode expr, var;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPAREN:
      jj_consume_token(OPAREN);
      expr = expression();
      jj_consume_token(CPAREN);
      if (expr == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.basicLineNumber, "Expecting an expression");}
    else {{if (true) return expr;}}
      break;
    case NUMBER:
    case IDENTIFIER:
      var = variable();
     if (var == null) {if (true) throw new CompilerException(CompilationErrorType.SYNTAX_ERROR, this.basicLineNumber, "Syntax error");}
    else {{if (true) return var;}}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public AbstractValueTreeNode variable() throws ParseException, CompilerException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      t = jj_consume_token(NUMBER);
                   {if (true) return new NumberTreeNode(new Value(t.image));}
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                       {if (true) return new IdentifierTreeNode(t.image);}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public BasicParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20,0x7e680000,0x7e600000,0x1000000,0xfc0,0x3000,0xc000,0x190000,0x180000,};
   }

  /** Constructor with InputStream. */
  public BasicParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public BasicParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new BasicParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public BasicParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new BasicParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public BasicParser(BasicParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(BasicParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[32];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 32; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
